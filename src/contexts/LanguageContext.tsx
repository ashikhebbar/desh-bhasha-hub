import React, { createContext, useContext, useState, useEffect } from 'react';

export interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

export const languages: Language[] = [
  { code: 'en', name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
  { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  { code: 'bn', name: 'Bengali', nativeName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', flag: 'üáßüá©' },
  { code: 'te', name: 'Telugu', nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
  { code: 'mr', name: 'Marathi', nativeName: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥' },
  { code: 'ta', name: 'Tamil', nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
  { code: 'gu', name: 'Gujarati', nativeName: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä', flag: 'üáÆüá≥' },
  { code: 'ur', name: 'Urdu', nativeName: 'ÿßÿ±ÿØŸà', flag: 'üáµüá∞' },
  { code: 'kn', name: 'Kannada', nativeName: '‡≤ï‡≤®‡≥ç‡≤®‡≤°', flag: 'üáÆüá≥' },
  { code: 'or', name: 'Odia', nativeName: '‡¨ì‡¨°‡¨º‡¨ø‡¨Ü', flag: 'üáÆüá≥' },
  { code: 'pa', name: 'Punjabi', nativeName: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä', flag: 'üáÆüá≥' },
  { code: 'ml', name: 'Malayalam', nativeName: '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç', flag: 'üáÆüá≥' },
];

interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

// Translation object
const translations: Record<string, Record<string, string>> = {
  en: {
    // Navigation
    'nav.home': 'Home',
    'nav.features': 'Features',
    'nav.about': 'About',
    'nav.contact': 'Contact',
    'auth.login': 'Sign In',
    'auth.signup': 'Sign Up',
    
    // Hero Section
    'hero.title': 'AI-Powered Cattle & Buffalo Breed Recognition',
    'hero.subtitle': 'Instantly identify Indian cattle and buffalo breeds with advanced AI technology. Empowering farmers, veterinarians, and researchers with accurate breed information.',
    'hero.cta.primary': 'Start Recognition',
    'hero.cta.secondary': 'Learn More',
    
    // Features
    'features.title': 'Revolutionary Features',
    'features.subtitle': 'Advanced AI technology designed specifically for Indian livestock',
    'feature.recognition.title': 'Instant Breed Recognition',
    'feature.recognition.desc': 'Upload or capture an image and get instant breed identification with detailed information.',
    'feature.database.title': 'Comprehensive Database',
    'feature.database.desc': 'Access detailed information about milk yield, origin, and physical characteristics.',
    'feature.multilingual.title': 'Multi-Language Support',
    'feature.multilingual.desc': 'Available in 12+ Indian languages for accessibility across all regions.',
    'feature.offline.title': 'Works Everywhere',
    'feature.offline.desc': 'Designed to work in rural areas with minimal internet connectivity.',
    
    // About
    'about.title': 'About Our Platform',
    'about.desc': 'We combine cutting-edge AI technology with deep understanding of Indian livestock to create a tool that empowers farmers and researchers alike.',
    
    // Contact
    'contact.title': 'Get In Touch',
    'contact.desc': 'Have questions or need support? We are here to help.',
  },
  hi: {
    // Navigation
    'nav.home': '‡§π‡•ã‡§Æ',
    'nav.features': '‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç',
    'nav.about': '‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç',
    'nav.contact': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï',
    'auth.login': '‡§∏‡§æ‡§á‡§® ‡§á‡§®',
    'auth.signup': '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™',
    
    // Hero Section
    'hero.title': 'AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§ó‡§æ‡§Ø ‡§î‡§∞ ‡§≠‡•à‡§Ç‡§∏ ‡§ï‡•Ä ‡§®‡§∏‡•ç‡§≤ ‡§™‡§π‡§ö‡§æ‡§®',
    'hero.subtitle': '‡§â‡§®‡•ç‡§®‡§§ AI ‡§§‡§ï‡§®‡•Ä‡§ï ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ó‡§æ‡§Ø ‡§î‡§∞ ‡§≠‡•à‡§Ç‡§∏ ‡§ï‡•Ä ‡§®‡§∏‡•ç‡§≤‡•ã‡§Ç ‡§ï‡•Ä ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç, ‡§™‡§∂‡•Å ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï‡•ã‡§Ç ‡§î‡§∞ ‡§∂‡•ã‡§ß‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡§ü‡•Ä‡§ï ‡§®‡§∏‡•ç‡§≤ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡§æ‡•§',
    'hero.cta.primary': '‡§™‡§π‡§ö‡§æ‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
    'hero.cta.secondary': '‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç',
    
    // Features
    'features.title': '‡§ï‡•ç‡§∞‡§æ‡§Ç‡§§‡§ø‡§ï‡§æ‡§∞‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç',
    'features.subtitle': '‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§™‡§∂‡•Å‡§ß‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡•Ä ‡§ó‡§à ‡§â‡§®‡•ç‡§®‡§§ AI ‡§§‡§ï‡§®‡•Ä‡§ï',
    'feature.recognition.title': '‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§®‡§∏‡•ç‡§≤ ‡§™‡§π‡§ö‡§æ‡§®',
    'feature.recognition.desc': '‡§è‡§ï ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§ï‡•à‡§™‡•ç‡§ö‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§®‡§∏‡•ç‡§≤ ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§™‡§æ‡§è‡§Ç‡•§',
    'feature.database.title': '‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏',
    'feature.database.desc': '‡§¶‡•Ç‡§ß ‡§ï‡•Ä ‡§â‡§™‡§ú, ‡§Æ‡•Ç‡§≤ ‡§∏‡•ç‡§•‡§æ‡§® ‡§î‡§∞ ‡§≠‡•å‡§§‡§ø‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§',
    'feature.multilingual.title': '‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡•Ä ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®',
    'feature.multilingual.desc': '‡§∏‡§≠‡•Ä ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡§π‡•Å‡§Ç‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è 12+ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡•§',
    'feature.offline.title': '‡§π‡§∞ ‡§ú‡§ó‡§π ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à',
    'feature.offline.desc': '‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§',
    
    // About
    'about.title': '‡§π‡§Æ‡§æ‡§∞‡•á ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç',
    'about.desc': '‡§π‡§Æ ‡§Ö‡§§‡•ç‡§Ø‡§æ‡§ß‡•Å‡§®‡§ø‡§ï AI ‡§§‡§ï‡§®‡•Ä‡§ï ‡§ï‡•ã ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§™‡§∂‡•Å‡§ß‡§® ‡§ï‡•Ä ‡§ó‡§π‡§∞‡•Ä ‡§∏‡§Æ‡§ù ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•ã‡§°‡§º‡§ï‡§∞ ‡§è‡§ï ‡§ê‡§∏‡§æ ‡§â‡§™‡§ï‡§∞‡§£ ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§î‡§∞ ‡§∂‡•ã‡§ß‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§',
    
    // Contact
    'contact.title': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§Æ‡•á‡§Ç ‡§∞‡§π‡•á‡§Ç',
    'contact.desc': '‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ö‡§æ‡§π‡§ø‡§è? ‡§π‡§Æ ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç‡•§',
  },
  // Add more translations for other languages as needed
};

interface LanguageProviderProps {
  children: React.ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(languages[0]);

  useEffect(() => {
    const savedLanguage = localStorage.getItem('preferred-language');
    if (savedLanguage) {
      const language = languages.find(lang => lang.code === savedLanguage);
      if (language) {
        setCurrentLanguage(language);
      }
    }
  }, []);

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
    localStorage.setItem('preferred-language', language.code);
  };

  const t = (key: string): string => {
    const translation = translations[currentLanguage.code]?.[key] || translations['en'][key] || key;
    return translation;
  };

  return (
    <LanguageContext.Provider value={{ currentLanguage, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};